{"version":3,"sources":["message-item.js","message-list.js","input.js","App.js","reportWebVitals.js","index.js"],"names":["messageItem","className","this","props","user","message","userName","React","Component","MessageItem","messages","map","item","userId","id","App","e","console","log","keyCode","sendMessage","refs","messageInput","ref","type","placeholder","onKeyUp","checkEnter","bind","onClick","state","name","userOnline","socket","io","on","response","newMessage","alert","setState","m","ids","_map","max","Math","push","data","objMessage","$","scrollHeight","scrollTop","clientHeight","animate","prop","value","emit","typing","sendnewMessage","login","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8231571c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class messageItem extends React.Component {\r\n    render () {\r\n        return (\r\n            <li className={this.props.user? \"message right appeared\": \"message left appeared\"}>\r\n                <div className=\"avatar\"></div>\r\n                <div className=\"text_wrapper\">\r\n                    <div className=\"text\"><b>{this.props.message.userName}</b><br></br>{this.props.message.message}</div>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Message from './message-item';\r\nexport default class MessageItem extends React.Component {\r\n    render () {\r\n        return (\r\n            <ul className=\"messages\">\r\n                {this.props.messages.map(item =>\r\n                    <Message key={item.id} user={item.userId === this.props.user? true: false} message={item.message}/>\r\n                )}\r\n            </ul>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class App extends React.Component {\r\n\r\n    checkEnter(e) {\r\n      console.log(e)\r\n      if (e.keyCode === 13) {\r\n        this.props.sendMessage(this.refs.messageInput);\r\n      }\r\n    }\r\n    render () {\r\n        return (\r\n           <div className=\"\">\r\n               <div className=\"bottom_wrapper\">\r\n                   <div  className=\"message_input_wrapper\">\r\n                        <input ref=\"messageInput\" type=\"text\" className=\"message_input\" placeholder=\"Type your message here\" onKeyUp={this.checkEnter.bind(this)} />\r\n                   </div>\r\n                   <div className=\"send_message\" onClick={() => this.props.sendMessage(this.refs.messageInput)} ref=\"inputMessage\" >\r\n                        <div className='icon'></div>\r\n                        <div className='text'>Send</div>\r\n                   </div>\r\n               </div>\r\n           </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport $ from 'jquery';\r\nimport Messages from './message-list';\r\nimport Input from './input';\r\nimport _map from 'lodash/map';\r\nimport io from 'socket.io-client';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //Khởi tạo state,\r\n        this.state = {\r\n            messages: [], // danh sách tin nhắn\r\n            user: {id: '', name: ''},// người dùng hiện tại, nếu rỗng sẽ hiển thị form login, có sẽ hiển thị phòng chat\r\n            userOnline:[] // danh sách người dùng đang online\r\n        }\r\n        this.socket = null;\r\n    }\r\n    //Connetct với server nodejs, thông qua socket.io\r\n    componentWillMount() {\r\n        console.log(this.state.user)\r\n        this.socket = io('https://github.com/thevu4496/chat-client.git');\r\n        this.socket.on('newMessage', (response) => {this.newMessage(response)}); //lắng nghe khi có tin nhắn mới\r\n        this.socket.on('loginFail', (response) => {alert('Tên đã có người sử dụng')}); //login fail\r\n        this.socket.on('loginSuccess', (response) => {this.setState({user: {id: this.socket.id, name: response}})}); //đăng nhập thành công \r\n         this.socket.on('updateUesrList', (response) => {this.setState({userOnline: response})}); //update lại danh sách người dùng online khi có người đăng nhập hoặc đăng xuất\r\n\r\n    }\r\n    //Khi có tin nhắn mới, sẽ push tin nhắn vào state mesgages, và nó sẽ được render ra màn hình\r\n    newMessage(m) {\r\n        const messages = this.state.messages;\r\n        let ids = _map(messages, 'id');\r\n        let max = Math.max(...ids);\r\n        messages.push({\r\n            id: max+1,\r\n            userId: m.user.id,\r\n            message: m.data,\r\n            userName: m.user.name\r\n        });\r\n        let objMessage = $('.messages');\r\n        if (objMessage[0].scrollHeight - objMessage[0].scrollTop === objMessage[0].clientHeight ) {\r\n            this.setState({messages});\r\n            objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300); //tạo hiệu ứng cuộn khi có tin nhắn mới\r\n\r\n        } else {\r\n            this.setState({messages});\r\n            if (m.id === this.state.user) {\r\n                objMessage.animate({ scrollTop: objMessage.prop('scrollHeight') }, 300);\r\n            }\r\n        }\r\n    }\r\n    //Gửi event socket newMessage với dữ liệu là nội dung tin nhắn và người gửi\r\n    sendnewMessage(m) {\r\n        if (m.value) {\r\n            this.socket.emit(\"newMessage\", {data:m.value, user: this.state.user}); //gửi event về server\r\n            m.value = \"\"; \r\n        }\r\n    }\r\n    //login để định danh người dùng\r\n    login() {\r\n        this.socket.emit(\"login\", this.refs.name.value); \r\n    }\r\n\r\n    render () {\r\n        return (\r\n           <div className=\"app__content\">\r\n              <h1>chat box</h1>\r\n          {/* kiểm tra xem user đã tồn tại hay chưa, nếu tồn tại thì render form chat, chưa thì render form login */}\r\n              { this.state.user.id && this.state.user.name ? \r\n                <div className=\"chat_window\">\r\n                    {/* danh sách user online */}\r\n                    <div className=\"menu\">\r\n                        <ul className=\"user\">\r\n                        <span className=\"user-name\">{this.state.user.name}</span>\r\n                            <p>Online</p>\r\n                            {this.state.userOnline.map(item =>\r\n                                <li key={item.id}><span>{item.name}</span></li>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                {/* danh sách message */}\r\n                    <div className=\"content\">\r\n                        <Messages user={this.state.user} messages={this.state.messages} typing={this.state.typing}/>\r\n                        <Input sendMessage={this.sendnewMessage.bind(this)}/>\r\n                    </div>\r\n                </div> \r\n                :\r\n                  <div className=\"login_form\">{/* form login */}\r\n                      <input type=\"text\" name=\"name\" ref=\"name\"></input>\r\n                      <input type=\"button\" name=\"\" value=\"Login\" onClick={this.login.bind(this)}></input>\r\n                  </div>\r\n              }\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}